// @generated by protoc-gen-es v2.7.0
// @generated from file api/adjustment.proto (package blueapi.api, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file api/adjustment.proto.
 */
export declare const file_api_adjustment: GenFile;

/**
 * AdjustmentConfig resource definition.
 *
 * @generated from message blueapi.api.AdjustmentConfig
 */
export declare type AdjustmentConfig = Message<"blueapi.api.AdjustmentConfig"> & {
  /**
   * User configuration
   *
   * @generated from field: repeated blueapi.api.ConfigFilters config = 1;
   */
  config: ConfigFilters[];

  /**
   * Vendor
   *
   * @generated from field: string vendor = 2;
   */
  vendor: string;

  /**
   * Management account configuration
   *
   * @generated from field: repeated blueapi.api.ManagementAccount accounts = 3;
   */
  accounts: ManagementAccount[];
};

/**
 * Describes the message blueapi.api.AdjustmentConfig.
 * Use `create(AdjustmentConfigSchema)` to create a new message.
 */
export declare const AdjustmentConfigSchema: GenMessage<AdjustmentConfig>;

/**
 * ManagementAccount resource definition.
 *
 * @generated from message blueapi.api.ManagementAccount
 */
export declare type ManagementAccount = Message<"blueapi.api.ManagementAccount"> & {
  /**
   * Vendor-managed organization account Id
   *
   * @generated from field: string managementAccountId = 1;
   */
  managementAccountId: string;

  /**
   * A list of filtering options. See [ConfigFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
   *
   * @generated from field: repeated blueapi.api.ConfigFilters config = 2;
   */
  config: ConfigFilters[];
};

/**
 * Describes the message blueapi.api.ManagementAccount.
 * Use `create(ManagementAccountSchema)` to create a new message.
 */
export declare const ManagementAccountSchema: GenMessage<ManagementAccount>;

/**
 * ConfigFilters resource definition.
 * A map of "key:value" config filters. The key indicates the adjustment key while the value is the filter adjustment value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
 *
 * For example, if you want to query lineitems with the adjustment `productCode:AmazonEC2`, set to `{"productCode":"AmazonEC2"}`. You can also use regular expressions for adjustment values, such as `{"description":"re:[A-Za-z0-9]*"}`.
 * List of available adjustment keys: productCode, type, description
 * For example value on productCode: AmazonEC2, AmazonRDS, AWSLambda, etc.
 * For example value on type: Fee, Refund, SppDiscount, etc.
 *
 * @generated from message blueapi.api.ConfigFilters
 */
export declare type ConfigFilters = Message<"blueapi.api.ConfigFilters"> & {
  /**
   * @generated from field: map<string, string> andFilters = 1;
   */
  andFilters: { [key: string]: string };
};

/**
 * Describes the message blueapi.api.ConfigFilters.
 * Use `create(ConfigFiltersSchema)` to create a new message.
 */
export declare const ConfigFiltersSchema: GenMessage<ConfigFilters>;

