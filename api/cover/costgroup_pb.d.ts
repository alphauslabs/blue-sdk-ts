// @generated by protoc-gen-es v2.7.0
// @generated from file api/cover/costgroup.proto (package blueapi.api.cover, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { MemberUserData } from "./user_pb";

/**
 * Describes the file api/cover/costgroup.proto.
 */
export declare const file_api_cover_costgroup: GenFile;

/**
 * @generated from message blueapi.api.cover.CostGroupData
 */
export declare type CostGroupData = Message<"blueapi.api.cover.CostGroupData"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: string image = 4;
   */
  image: string;

  /**
   * @generated from field: string icon = 5;
   */
  icon: string;

  /**
   * @generated from field: string colorTheme = 6;
   */
  colorTheme: string;

  /**
   * @generated from field: string createdAt = 7;
   */
  createdAt: string;

  /**
   * @generated from field: string updatedAt = 8;
   */
  updatedAt: string;

  /**
   * @generated from field: repeated blueapi.api.cover.MemberUserData members = 9;
   */
  members: MemberUserData[];

  /**
   * @generated from field: blueapi.api.cover.Combinations combinations = 10;
   */
  combinations?: Combinations;

  /**
   * @generated from field: blueapi.api.cover.MemberUserData createdBy = 11;
   */
  createdBy?: MemberUserData;

  /**
   * @generated from field: blueapi.api.cover.EventIndicator eventIndicator = 12;
   */
  eventIndicator?: EventIndicator;

  /**
   * @generated from field: blueapi.api.cover.AnomalyOptions anomalyOptions = 13;
   */
  anomalyOptions?: AnomalyOptions;

  /**
   * @generated from field: blueapi.api.cover.CostGroupType type = 14;
   */
  type: CostGroupType;
};

/**
 * Describes the message blueapi.api.cover.CostGroupData.
 * Use `create(CostGroupDataSchema)` to create a new message.
 */
export declare const CostGroupDataSchema: GenMessage<CostGroupData>;

/**
 * @generated from message blueapi.api.cover.Combinations
 */
export declare type Combinations = Message<"blueapi.api.cover.Combinations"> & {
  /**
   * Optional. Valid only for the `aws` vendor. AWS-specific options.
   *
   * @generated from field: blueapi.api.cover.CostGroupAwsOptions awsOptions = 1;
   */
  awsOptions?: CostGroupAwsOptions;

  /**
   * Optional. Valid only for the `azure` vendor. Azure-specific options.
   *
   * @generated from field: blueapi.api.cover.CostGroupAzureOptions azureOptions = 2;
   */
  azureOptions?: CostGroupAzureOptions;

  /**
   * Optional. Valid only for the `gcp` vendor. GCP-specific options.
   *
   * @generated from field: blueapi.api.cover.CostGroupGcpOptions gcpOptions = 3;
   */
  gcpOptions?: CostGroupGcpOptions;

  /**
   * Optional. Valid only for the `azurecsp` vendor. AzureCSP-specific options.
   *
   * @generated from field: blueapi.api.cover.CostGroupAzureCspOptions azurecspOptions = 4;
   */
  azurecspOptions?: CostGroupAzureCspOptions;

  /**
   * Optional. For custom selection when creating cost groups.
   * This field allows custom options for specifying criteria for cost group creation.
   *
   * @generated from field: blueapi.api.cover.CostGroupCustomOptions customOptions = 5;
   */
  customOptions?: CostGroupCustomOptions;
};

/**
 * Describes the message blueapi.api.cover.Combinations.
 * Use `create(CombinationsSchema)` to create a new message.
 */
export declare const CombinationsSchema: GenMessage<Combinations>;

/**
 * AWS-specific options for CreateCostGroupRequest.
 *
 * @generated from message blueapi.api.cover.CostGroupAwsOptions
 */
export declare type CostGroupAwsOptions = Message<"blueapi.api.cover.CostGroupAwsOptions"> & {
  /**
   * Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
   * A map of "key:value" column filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
   *
   * For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters filters = 1;
   */
  filters: CostGroupOptionsFilters[];

  /**
   * Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
   * A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
   *
   * For example, if you want to query lineitems with the tag `project:MY_PROJECT`, set to `{"project":"MY_PROJECT"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters tagFilters = 2;
   */
  tagFilters: CostGroupOptionsFilters[];
};

/**
 * Describes the message blueapi.api.cover.CostGroupAwsOptions.
 * Use `create(CostGroupAwsOptionsSchema)` to create a new message.
 */
export declare const CostGroupAwsOptionsSchema: GenMessage<CostGroupAwsOptions>;

/**
 * Azure-specific options for CreateCostGroupRequest.
 *
 * @generated from message blueapi.api.cover.CostGroupAzureOptions
 */
export declare type CostGroupAzureOptions = Message<"blueapi.api.cover.CostGroupAzureOptions"> & {
  /**
   * Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
   * A map of "key:value" column filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
   *
   * For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters filters = 1;
   */
  filters: CostGroupOptionsFilters[];

  /**
   * Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
   * A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
   *
   * For example, if you want to query lineitems with the tag `project:MY_PROJECT`, set to `{"project":"MY_PROJECT"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters tagFilters = 2;
   */
  tagFilters: CostGroupOptionsFilters[];
};

/**
 * Describes the message blueapi.api.cover.CostGroupAzureOptions.
 * Use `create(CostGroupAzureOptionsSchema)` to create a new message.
 */
export declare const CostGroupAzureOptionsSchema: GenMessage<CostGroupAzureOptions>;

/**
 * AzureCsp-specific options for CreateCostGroupRequest.
 *
 * @generated from message blueapi.api.cover.CostGroupAzureCspOptions
 */
export declare type CostGroupAzureCspOptions = Message<"blueapi.api.cover.CostGroupAzureCspOptions"> & {
  /**
   * Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
   * A map of "key:value" column filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
   *
   * For example, if you like to filter `productCode` to return only `AmazonEC2`, set to `{"productCode":"eq:AmazonEC2"}` or `{"productCode":"AmazonEC2"}`. You can also use a regular expression like `{"productCode":"re:AmazonEC2|AmazonRDS"}`, which means return all AmazonEC2 or AmazonRDS lineitems. Or reverse regexp, such as `{"productCode":"!re:^AmazonEC2$"}`, which means return all items except `AmazonEC2`.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters filters = 1;
   */
  filters: CostGroupOptionsFilters[];

  /**
   * Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
   * A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
   *
   * For example, if you want to query lineitems with the tag `project:MY_PROJECT`, set to `{"project":"MY_PROJECT"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters tagFilters = 2;
   */
  tagFilters: CostGroupOptionsFilters[];
};

/**
 * Describes the message blueapi.api.cover.CostGroupAzureCspOptions.
 * Use `create(CostGroupAzureCspOptionsSchema)` to create a new message.
 */
export declare const CostGroupAzureCspOptionsSchema: GenMessage<CostGroupAzureCspOptions>;

/**
 * GCP-specific options for CreateCostGroupRequest.
 *
 * @generated from message blueapi.api.cover.CostGroupGcpOptions
 */
export declare type CostGroupGcpOptions = Message<"blueapi.api.cover.CostGroupGcpOptions"> & {
  /**
   * Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
   * A map of "key:value" column filters. The key indicates the column name while the value is the filter value prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
   *
   * For example, if you like to filter `serviceDescriptinon` to return only `Cloud Spanner`, set to `{"serviceDescription":"eq:Cloud Spanner"}` or `{"serviceDescription":"Cloud Spanner"}`. You can also use a regular expression like `{"serviceDescription":"re:Cloud Spanner|BigQuery"}`, which means return all Cloud Spanner or BigQuery lineitems. Or reverse regexp, such as `{"serviceDescription":"!re:^Cloud Spanner$"}`, which means return all items except `Cloud Spanner`.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters filters = 1;
   */
  filters: CostGroupOptionsFilters[];

  /**
   * Tags on gcp used to conditionally allow or deny policies based on whether a supported resource has a specific tag.
   * Suppose you have a set of virtual machines (VMs) running various applications, and you want to distinguish between them based on their roles. You could assign tags like "app:webserver" and "app:database" to identify which VMs serve as web servers and which ones are database servers.
   * If you want to query lineitems with the tag `app:database`, set to `{"app":"database"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters tagFilters = 2;
   */
  tagFilters: CostGroupOptionsFilters[];

  /**
   * Labels on gcp help you organize resources and manage your costs at scale, with the granularity you need.
   * For example, on Compute Engine, you can use labels to group VMs in categories such as production, staging, or development so that you can search for resources that belong to each development stage.
   * If you want to query lineitems with the label `vm-prod: prod`, set to `{"vm-prod":"prod"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters labelFilters = 3;
   */
  labelFilters: CostGroupOptionsFilters[];

  /**
   * Project Labels refers to labels that have been assigned to GCP projects. 
   * For example, projectId "mobingi-main" assigned as "env:prod"
   * If you want to query lineitems with the label `env: prod`, set to `{"env":"prod"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters projectLabelFilters = 4;
   */
  projectLabelFilters: CostGroupOptionsFilters[];
};

/**
 * Describes the message blueapi.api.cover.CostGroupGcpOptions.
 * Use `create(CostGroupGcpOptionsSchema)` to create a new message.
 */
export declare const CostGroupGcpOptionsSchema: GenMessage<CostGroupGcpOptions>;

/**
 * Custom-specific options for CreateCostGroupRequest.
 *
 * @generated from message blueapi.api.cover.CostGroupCustomOptions
 */
export declare type CostGroupCustomOptions = Message<"blueapi.api.cover.CostGroupCustomOptions"> & {
  /**
   * Optional. A list of filtering options. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters filters = 1;
   */
  filters: CostGroupOptionsFilters[];

  /**
   * Optional. A list of filtering options. See [ReadCostsRequestAwsOptionsFilters] for more information on each filter item. Multiple filter items will use the logical 'or' operator, e.g. filter1 || filter2 || filter3, etc.
   * A map of "key:value" tag filters. The key indicates the tag key while the value is the filter tag value which can be prefixed by either "eq:" (equal), "re:" (regular expressions based on https://github.com/google/re2), or "!re:" (reverse "re:"). No prefix is the same as "eq:". Multiple map items will use the logical 'and' operator, e.g. mapfilter1 && mapfilter2 && mapfilter3, etc.
   *
   * For example, if you want to query lineitems with the tag `project:MY_PROJECT`, set to `{"project":"MY_PROJECT"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters tagFilters = 2;
   */
  tagFilters: CostGroupOptionsFilters[];

  /**
   * Labels on gcp help you organize resources and manage your costs at scale, with the granularity you need.
   * For example, on Compute Engine, you can use labels to group VMs in categories such as production, staging, or development so that you can search for resources that belong to each development stage.
   * If you want to query lineitems with the label `vm-prod: prod`, set to `{"vm-prod":"prod"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters labelFilters = 3;
   */
  labelFilters: CostGroupOptionsFilters[];

  /**
   * Project Labels refers to labels that have been assigned to GCP projects. 
   * For example, projectId "mobingi-main" assigned as "env:prod"
   * If you want to query lineitems with the label `env: prod`, set to `{"env":"prod"}`. You can also use regular expressions for tag values, such as `{"name":"re:[A-Za-z0-9]*"}`.
   *
   * @generated from field: repeated blueapi.api.cover.CostGroupOptionsFilters projectLabelFilters = 4;
   */
  projectLabelFilters: CostGroupOptionsFilters[];
};

/**
 * Describes the message blueapi.api.cover.CostGroupCustomOptions.
 * Use `create(CostGroupCustomOptionsSchema)` to create a new message.
 */
export declare const CostGroupCustomOptionsSchema: GenMessage<CostGroupCustomOptions>;

/**
 * @generated from message blueapi.api.cover.CostGroupOptionsFilters
 */
export declare type CostGroupOptionsFilters = Message<"blueapi.api.cover.CostGroupOptionsFilters"> & {
  /**
   * @generated from field: map<string, string> andFilters = 1;
   */
  andFilters: { [key: string]: string };
};

/**
 * Describes the message blueapi.api.cover.CostGroupOptionsFilters.
 * Use `create(CostGroupOptionsFiltersSchema)` to create a new message.
 */
export declare const CostGroupOptionsFiltersSchema: GenMessage<CostGroupOptionsFilters>;

/**
 * @generated from message blueapi.api.cover.Account
 */
export declare type Account = Message<"blueapi.api.cover.Account"> & {
  /**
   * @generated from field: string accountId = 1;
   */
  accountId: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * account, subscription, project
   *
   * @generated from field: string type = 3;
   */
  type: string;
};

/**
 * Describes the message blueapi.api.cover.Account.
 * Use `create(AccountSchema)` to create a new message.
 */
export declare const AccountSchema: GenMessage<Account>;

/**
 * @generated from message blueapi.api.cover.EventIndicator
 */
export declare type EventIndicator = Message<"blueapi.api.cover.EventIndicator"> & {
  /**
   * Anomaly is supported for now
   *
   * @generated from field: bool anomaly = 1;
   */
  anomaly: boolean;

  /**
   * Temporary indicator if cost group was created via new visual builder
   *
   * @generated from field: bool visualBuilder = 2;
   */
  visualBuilder: boolean;
};

/**
 * Describes the message blueapi.api.cover.EventIndicator.
 * Use `create(EventIndicatorSchema)` to create a new message.
 */
export declare const EventIndicatorSchema: GenMessage<EventIndicator>;

/**
 * @generated from message blueapi.api.cover.AnomalyOptions
 */
export declare type AnomalyOptions = Message<"blueapi.api.cover.AnomalyOptions"> & {
  /**
   * @generated from field: float threshold = 1;
   */
  threshold: number;

  /**
   * @generated from field: bool isPercentage = 2;
   */
  isPercentage: boolean;

  /**
   * @generated from field: int64 pastDataInMonths = 3;
   */
  pastDataInMonths: bigint;
};

/**
 * Describes the message blueapi.api.cover.AnomalyOptions.
 * Use `create(AnomalyOptionsSchema)` to create a new message.
 */
export declare const AnomalyOptionsSchema: GenMessage<AnomalyOptions>;

/**
 * @generated from enum blueapi.api.cover.CostGroupType
 */
export enum CostGroupType {
  /**
   * @generated from enum value: default = 0;
   */
  default = 0,

  /**
   * @generated from enum value: ai = 1;
   */
  ai = 1,

  /**
   * @generated from enum value: container = 2;
   */
  container = 2,
}

/**
 * Describes the enum blueapi.api.cover.CostGroupType.
 */
export declare const CostGroupTypeSchema: GenEnum<CostGroupType>;

