// @generated by protoc-gen-connect-query v2.1.1
// @generated from file cost/v1/cost.proto (package blueapi.cost.v1, syntax proto3)
/* eslint-disable */

import { Cost } from "./cost_pb";

/**
 * Gets a vendor payer account.
 *
 * This API includes all of the account's metadata. See (https://alphauslabs.github.io/blueapi/)[https://alphauslabs.github.io/blueapi/] for the list of supported attributes. For AWS, this means a management account (formerly known as master or payer account); for Azure, this means a subscription, for GCP, this means a project.
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetPayerAccount
 */
export const getPayerAccount: typeof Cost["method"]["getPayerAccount"];
/**
 * Gets a payer account's proforma reports. Applicable for AWS payer accounts only.
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetPayerProformaReports
 */
export const getPayerProformaReports: typeof Cost["method"]["getPayerProformaReports"];
/**
 * DEPRECATED: Registers a vendor payer account. This is now deprecated for AWS payer accounts. To register an AWS payer account, check out the 'CreateDefaultCostAccess' API.
 *
 * @generated from rpc blueapi.cost.v1.Cost.CreatePayerAccount
 */
export const createPayerAccount: typeof Cost["method"]["createPayerAccount"];
/**
 * WORK-IN-PROGRES: Registers a vendor payer account with their basics details such as accountId and accountName.
 *
 * @generated from rpc blueapi.cost.v1.Cost.RegisterPayerAccount
 */
export const registerPayerAccount: typeof Cost["method"]["registerPayerAccount"];
/**
 * Deletes a vendor payer account.
 *
 * @generated from rpc blueapi.cost.v1.Cost.DeletePayerAccount
 */
export const deletePayerAccount: typeof Cost["method"]["deletePayerAccount"];
/**
 * Gets a vendor account. This API includes all of the account's metadata. See https://alphauslabs.github.io/blueapi/ for the list of supported attributes.
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetAccount
 */
export const getAccount: typeof Cost["method"]["getAccount"];
/**
 * Registers a vendor account.
 *
 * @generated from rpc blueapi.cost.v1.Cost.CreateAccount
 */
export const createAccount: typeof Cost["method"]["createAccount"];
/**
 * WORK-IN-PROGRESS: Updates a vendor account. Only available in Ripple.
 *
 * @generated from rpc blueapi.cost.v1.Cost.UpdateAccount
 */
export const updateAccount: typeof Cost["method"]["updateAccount"];
/**
 * WORK-IN-PROGRESS: Deletes a vendor account.
 *
 * @generated from rpc blueapi.cost.v1.Cost.DeleteAccount
 */
export const deleteAccount: typeof Cost["method"]["deleteAccount"];
/**
 * WORK-IN-PROGRESS: Gets the vendor cost calculator's current configuration.
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetCalculatorConfig
 */
export const getCalculatorConfig: typeof Cost["method"]["getCalculatorConfig"];
/**
 * Creates a cost modifier.
 *
 * A cost modifier allows you to modify the cost per lineitem. At the moment, the supported `{vendor}` is `aws` and only applies to items not affected by trueunblended calculations. Items not covered include some usages under `AmazonEC2`, `AmazonRDS`, `AmazonElastiCache`, `AmazonES`, and `AmazonRedShift`, that are covered by their respective RIs and/or SPs. Non-usage items such as discounts, refunds, fees, etc. are also not covered. Only available in Ripple.
 *
 * @generated from rpc blueapi.cost.v1.Cost.CreateCalculatorCostModifier
 */
export const createCalculatorCostModifier: typeof Cost["method"]["createCalculatorCostModifier"];
/**
 * Deletes a cost modifier. At the moment, the supported {vendor} is 'aws'. Only available in Ripple.
 *
 * @generated from rpc blueapi.cost.v1.Cost.DeleteCalculatorCostModifier
 */
export const deleteCalculatorCostModifier: typeof Cost["method"]["deleteCalculatorCostModifier"];
/**
 * Initiates an ondemand import of all registered CUR files.
 *
 * See https://help.alphaus.cloud/en/articles/3612555-ripple-aws-things-you-need-to-prepare-before-starting for more information.
 *
 * @generated from rpc blueapi.cost.v1.Cost.ImportCurFiles
 */
export const importCurFiles: typeof Cost["method"]["importCurFiles"];
/**
 * Triggers monthly calculations for costs and invoices at either organization or billing group level.
 *
 * For the AWS calculator, aggregation is done at daily and monthly level. Also, all occurrences of the character `|` (pipe) in the CUR descriptions and tag key/values are replaced with the `/` (forward-slash) character. This is due to the `|` character having a special designation in the data processing workflows.
 *
 * @generated from rpc blueapi.cost.v1.Cost.CalculateCosts
 */
export const calculateCosts: typeof Cost["method"]["calculateCosts"];
/**
 * Lists vendor costs calculations history and statuses.
 *
 * @generated from rpc blueapi.cost.v1.Cost.ListCalculationsHistory
 */
export const listCalculationsHistory: typeof Cost["method"]["listCalculationsHistory"];
/**
 * Lists the schedules of your monthly calculations. Only available in Ripple.
 *
 * @generated from rpc blueapi.cost.v1.Cost.ListCalculationsSchedules
 */
export const listCalculationsSchedules: typeof Cost["method"]["listCalculationsSchedules"];
/**
 * Creates a schedule to trigger your monthly calculations. At the moment, only one schedule is allowed per account. Only available in Ripple.
 *
 * @generated from rpc blueapi.cost.v1.Cost.CreateCalculationsSchedule
 */
export const createCalculationsSchedule: typeof Cost["method"]["createCalculationsSchedule"];
/**
 * Deletes the schedule of your monthly calculations. Only available in Ripple.
 *
 * @generated from rpc blueapi.cost.v1.Cost.DeleteCalculationsSchedule
 */
export const deleteCalculationsSchedule: typeof Cost["method"]["deleteCalculationsSchedule"];
/**
 * Lists the usage-based cost filter condition. Only available in Wave(Pro).
 *
 * @generated from rpc blueapi.cost.v1.Cost.ListCostFilters
 */
export const listCostFilters: typeof Cost["method"]["listCostFilters"];
/**
 * Creates the usage-based cost filter condition.
 *
 * You can consider cost filters as predefined/prefiltered queries using the `v1/{vendor}/costs:read` or `ReadCosts` API. Only available in Wave(Pro).
 *
 * @generated from rpc blueapi.cost.v1.Cost.CreateCostFilters
 */
export const createCostFilters: typeof Cost["method"]["createCostFilters"];
/**
 * Updates the usage-based cost filter condition. Only available in Wave(Pro).
 *
 * @generated from rpc blueapi.cost.v1.Cost.UpdateCostFilters
 */
export const updateCostFilters: typeof Cost["method"]["updateCostFilters"];
/**
 * Deletes the usage-based cost filter condition. Only available in Wave(Pro).
 *
 * @generated from rpc blueapi.cost.v1.Cost.DeleteCostFilters
 */
export const deleteCostFilters: typeof Cost["method"]["deleteCostFilters"];
/**
 * Exports the usage-based cost filter condition. Only available in Wave(Pro).
 *
 * @generated from rpc blueapi.cost.v1.Cost.ExportCostFiltersFile
 */
export const exportCostFiltersFile: typeof Cost["method"]["exportCostFiltersFile"];
/**
 * WORK-IN-PROGRESS: Reads the available cost attributes of an organization (Ripple) or billing group (Wave).
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetCostAttributes
 */
export const getCostAttributes: typeof Cost["method"]["getCostAttributes"];
/**
 * Fetches cost forecasts for the specified billing group. Includes historical cost (up to previous month) and forecasted cost (up to three months for now).
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetForecasts
 */
export const getForecasts: typeof Cost["method"]["getForecasts"];
/**
 * Fetches monthly accumulated costs vs forecasted cost vs budget for the id.
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetMonthlyCostForecast
 */
export const getMonthlyCostForecast: typeof Cost["method"]["getMonthlyCostForecast"];
/**
 * Fetches previous month cost vs current month forecast vs current accumulated cost per category for id.
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetMonthOnMonthCostForecast
 */
export const getMonthOnMonthCostForecast: typeof Cost["method"]["getMonthOnMonthCostForecast"];
/**
 * Fetches current month daily forecast vs current accumulated daily cost for id.
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetMonthToDateCostForecast
 */
export const getMonthToDateCostForecast: typeof Cost["method"]["getMonthToDateCostForecast"];
/**
 * Fetches monthly budget for the account/acctgroup id.
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetAccountBudget
 */
export const getAccountBudget: typeof Cost["method"]["getAccountBudget"];
/**
 * Creates monthly budget for the account/acctgroup id.
 *
 * @generated from rpc blueapi.cost.v1.Cost.CreateAccountBudget
 */
export const createAccountBudget: typeof Cost["method"]["createAccountBudget"];
/**
 * Updates monthly budget for the account/acctgroup id.
 *
 * @generated from rpc blueapi.cost.v1.Cost.UpdateAccountBudget
 */
export const updateAccountBudget: typeof Cost["method"]["updateAccountBudget"];
/**
 * Removes monthly budget for the account/acctgroup id from database.
 *
 * @generated from rpc blueapi.cost.v1.Cost.DeleteAccountBudget
 */
export const deleteAccountBudget: typeof Cost["method"]["deleteAccountBudget"];
/**
 * Get the budget alerts for the account id. Only available in Wave(Pro).
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetAccountBudgetAlerts
 */
export const getAccountBudgetAlerts: typeof Cost["method"]["getAccountBudgetAlerts"];
/**
 * Create the budget alerts for the account id. Only available in Wave(Pro).
 *
 * @generated from rpc blueapi.cost.v1.Cost.CreateAccountBudgetAlerts
 */
export const createAccountBudgetAlerts: typeof Cost["method"]["createAccountBudgetAlerts"];
/**
 * Update the budget alerts for the account id. Only available in Wave(Pro).
 *
 * @generated from rpc blueapi.cost.v1.Cost.UpdateAccountBudgetAlerts
 */
export const updateAccountBudgetAlerts: typeof Cost["method"]["updateAccountBudgetAlerts"];
/**
 * Delete the budget alerts for the account id. Only available in Wave(Pro).
 *
 * @generated from rpc blueapi.cost.v1.Cost.DeleteAccountBudgetAlerts
 */
export const deleteAccountBudgetAlerts: typeof Cost["method"]["deleteAccountBudgetAlerts"];
/**
 * GetBudgetAlerts
 *
 * Gets the budget alerts.
 * Only available in Wave(Pro).
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetBudgetAlerts
 */
export const getBudgetAlerts: typeof Cost["method"]["getBudgetAlerts"];
/**
 * CreateBudgetAlerts
 *
 * Create the budget alerts.
 * Only available in Wave(Pro).
 *
 * @generated from rpc blueapi.cost.v1.Cost.CreateBudgetAlerts
 */
export const createBudgetAlerts: typeof Cost["method"]["createBudgetAlerts"];
/**
 * UpdateBudgetAlerts
 *
 * Updates the budget alerts.
 * Only available in Wave(Pro).
 *
 * @generated from rpc blueapi.cost.v1.Cost.UpdateBudgetAlerts
 */
export const updateBudgetAlerts: typeof Cost["method"]["updateBudgetAlerts"];
/**
 * DeleteBudgetAlerts
 *
 * Deletes the budget alerts.
 * Only available in Wave(Pro).
 *
 * @generated from rpc blueapi.cost.v1.Cost.DeleteBudgetAlerts
 */
export const deleteBudgetAlerts: typeof Cost["method"]["deleteBudgetAlerts"];
/**
 * WORK-IN-PROGRESS: Get cost opmtimization recommendations for an organization (or MSP).
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetRecommendations
 */
export const getRecommendations: typeof Cost["method"]["getRecommendations"];
/**
 * Get cost reduction details for an organization (or MSP).
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetCostReduction
 */
export const getCostReduction: typeof Cost["method"]["getCostReduction"];
/**
 * Exports RI and SP for all payers. 
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetExportRISP
 */
export const getExportRISP: typeof Cost["method"]["getExportRISP"];
/**
 * Get the utilization details for an organization (or MSP).
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetUtilization
 */
export const getUtilization: typeof Cost["method"]["getUtilization"];
/**
 * Get coverage options details for an organization (or MSP).
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetCoverageOptions
 */
export const getCoverageOptions: typeof Cost["method"]["getCoverageOptions"];
/**
 * Get ondemand cost details for an organization (or MSP).
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetCoverageOndemand
 */
export const getCoverageOndemand: typeof Cost["method"]["getCoverageOndemand"];
/**
 * Get the breakeven point details for the RI or SP.
 *
 * @generated from rpc blueapi.cost.v1.Cost.GetBreakevenPoint
 */
export const getBreakevenPoint: typeof Cost["method"]["getBreakevenPoint"];
/**
 * WORK-IN-PROGRESS: Check inputed accountIds belong to current MSP or not
 *
 * @generated from rpc blueapi.cost.v1.Cost.CheckAccountsBelongToMsp
 */
export const checkAccountsBelongToMsp: typeof Cost["method"]["checkAccountsBelongToMsp"];
/**
 * WORK-IN-PROGRESS: List the prerequisites for cost calculations.
 *
 * @generated from rpc blueapi.cost.v1.Cost.ListCalculationPrerequisites
 */
export const listCalculationPrerequisites: typeof Cost["method"]["listCalculationPrerequisites"];
