// Copyright 2018 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.7.0
// @generated from file google/api/metric.proto (package google.api, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { LabelDescriptor } from "./label_pb";

/**
 * Describes the file google/api/metric.proto.
 */
export declare const file_google_api_metric: GenFile;

/**
 * Defines a metric type and its schema. Once a metric descriptor is created,
 * deleting or altering it stops data collection and makes the metric type's
 * existing data unusable.
 *
 * @generated from message google.api.MetricDescriptor
 */
export declare type MetricDescriptor = Message<"google.api.MetricDescriptor"> & {
  /**
   * The resource name of the metric descriptor.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The metric type, including its DNS name prefix. The type is not
   * URL-encoded.  All user-defined custom metric types have the DNS name
   * `custom.googleapis.com`.  Metric types should use a natural hierarchical
   * grouping. For example:
   *
   *     "custom.googleapis.com/invoice/paid/amount"
   *     "appengine.googleapis.com/http/server/response_latencies"
   *
   * @generated from field: string type = 8;
   */
  type: string;

  /**
   * The set of labels that can be used to describe a specific
   * instance of this metric type. For example, the
   * `appengine.googleapis.com/http/server/response_latencies` metric
   * type has a label for the HTTP response code, `response_code`, so
   * you can look at latencies for successful responses or just
   * for responses that failed.
   *
   * @generated from field: repeated google.api.LabelDescriptor labels = 2;
   */
  labels: LabelDescriptor[];

  /**
   * Whether the metric records instantaneous values, changes to a value, etc.
   * Some combinations of `metric_kind` and `value_type` might not be supported.
   *
   * @generated from field: google.api.MetricDescriptor.MetricKind metric_kind = 3;
   */
  metricKind: MetricDescriptor_MetricKind;

  /**
   * Whether the measurement is an integer, a floating-point number, etc.
   * Some combinations of `metric_kind` and `value_type` might not be supported.
   *
   * @generated from field: google.api.MetricDescriptor.ValueType value_type = 4;
   */
  valueType: MetricDescriptor_ValueType;

  /**
   * The unit in which the metric value is reported. It is only applicable
   * if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
   * supported units are a subset of [The Unified Code for Units of
   * Measure](http://unitsofmeasure.org/ucum.html) standard:
   *
   * **Basic units (UNIT)**
   *
   * * `bit`   bit
   * * `By`    byte
   * * `s`     second
   * * `min`   minute
   * * `h`     hour
   * * `d`     day
   *
   * **Prefixes (PREFIX)**
   *
   * * `k`     kilo    (10**3)
   * * `M`     mega    (10**6)
   * * `G`     giga    (10**9)
   * * `T`     tera    (10**12)
   * * `P`     peta    (10**15)
   * * `E`     exa     (10**18)
   * * `Z`     zetta   (10**21)
   * * `Y`     yotta   (10**24)
   * * `m`     milli   (10**-3)
   * * `u`     micro   (10**-6)
   * * `n`     nano    (10**-9)
   * * `p`     pico    (10**-12)
   * * `f`     femto   (10**-15)
   * * `a`     atto    (10**-18)
   * * `z`     zepto   (10**-21)
   * * `y`     yocto   (10**-24)
   * * `Ki`    kibi    (2**10)
   * * `Mi`    mebi    (2**20)
   * * `Gi`    gibi    (2**30)
   * * `Ti`    tebi    (2**40)
   *
   * **Grammar**
   *
   * The grammar also includes these connectors:
   *
   * * `/`    division (as an infix operator, e.g. `1/s`).
   * * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
   *
   * The grammar for a unit is as follows:
   *
   *     Expression = Component { "." Component } { "/" Component } ;
   *
   *     Component = ( [ PREFIX ] UNIT | "%" ) [ Annotation ]
   *               | Annotation
   *               | "1"
   *               ;
   *
   *     Annotation = "{" NAME "}" ;
   *
   * Notes:
   *
   * * `Annotation` is just a comment if it follows a `UNIT` and is
   *    equivalent to `1` if it is used alone. For examples,
   *    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
   * * `NAME` is a sequence of non-blank printable ASCII characters not
   *    containing '{' or '}'.
   * * `1` represents dimensionless value 1, such as in `1/s`.
   * * `%` represents dimensionless value 1/100, and annotates values giving
   *    a percentage.
   *
   * @generated from field: string unit = 5;
   */
  unit: string;

  /**
   * A detailed description of the metric, which can be used in documentation.
   *
   * @generated from field: string description = 6;
   */
  description: string;

  /**
   * A concise name for the metric, which can be displayed in user interfaces.
   * Use sentence case without an ending period, for example "Request count".
   * This field is optional but it is recommended to be set for any metrics
   * associated with user-visible concepts, such as Quota.
   *
   * @generated from field: string display_name = 7;
   */
  displayName: string;
};

/**
 * Describes the message google.api.MetricDescriptor.
 * Use `create(MetricDescriptorSchema)` to create a new message.
 */
export declare const MetricDescriptorSchema: GenMessage<MetricDescriptor>;

/**
 * The kind of measurement. It describes how the data is reported.
 *
 * @generated from enum google.api.MetricDescriptor.MetricKind
 */
export enum MetricDescriptor_MetricKind {
  /**
   * Do not use this default value.
   *
   * @generated from enum value: METRIC_KIND_UNSPECIFIED = 0;
   */
  METRIC_KIND_UNSPECIFIED = 0,

  /**
   * An instantaneous measurement of a value.
   *
   * @generated from enum value: GAUGE = 1;
   */
  GAUGE = 1,

  /**
   * The change in a value during a time interval.
   *
   * @generated from enum value: DELTA = 2;
   */
  DELTA = 2,

  /**
   * A value accumulated over a time interval.  Cumulative
   * measurements in a time series should have the same start time
   * and increasing end times, until an event resets the cumulative
   * value to zero and sets a new start time for the following
   * points.
   *
   * @generated from enum value: CUMULATIVE = 3;
   */
  CUMULATIVE = 3,
}

/**
 * Describes the enum google.api.MetricDescriptor.MetricKind.
 */
export declare const MetricDescriptor_MetricKindSchema: GenEnum<MetricDescriptor_MetricKind>;

/**
 * The value type of a metric.
 *
 * @generated from enum google.api.MetricDescriptor.ValueType
 */
export enum MetricDescriptor_ValueType {
  /**
   * Do not use this default value.
   *
   * @generated from enum value: VALUE_TYPE_UNSPECIFIED = 0;
   */
  VALUE_TYPE_UNSPECIFIED = 0,

  /**
   * The value is a boolean.
   * This value type can be used only if the metric kind is `GAUGE`.
   *
   * @generated from enum value: BOOL = 1;
   */
  BOOL = 1,

  /**
   * The value is a signed 64-bit integer.
   *
   * @generated from enum value: INT64 = 2;
   */
  INT64 = 2,

  /**
   * The value is a double precision floating point number.
   *
   * @generated from enum value: DOUBLE = 3;
   */
  DOUBLE = 3,

  /**
   * The value is a text string.
   * This value type can be used only if the metric kind is `GAUGE`.
   *
   * @generated from enum value: STRING = 4;
   */
  STRING = 4,

  /**
   * The value is a [`Distribution`][google.api.Distribution].
   *
   * @generated from enum value: DISTRIBUTION = 5;
   */
  DISTRIBUTION = 5,

  /**
   * The value is money.
   *
   * @generated from enum value: MONEY = 6;
   */
  MONEY = 6,
}

/**
 * Describes the enum google.api.MetricDescriptor.ValueType.
 */
export declare const MetricDescriptor_ValueTypeSchema: GenEnum<MetricDescriptor_ValueType>;

/**
 * A specific metric, identified by specifying values for all of the
 * labels of a [`MetricDescriptor`][google.api.MetricDescriptor].
 *
 * @generated from message google.api.Metric
 */
export declare type Metric = Message<"google.api.Metric"> & {
  /**
   * An existing metric type, see [google.api.MetricDescriptor][google.api.MetricDescriptor].
   * For example, `custom.googleapis.com/invoice/paid/amount`.
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * The set of label values that uniquely identify this metric. All
   * labels listed in the `MetricDescriptor` must be assigned values.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.api.Metric.
 * Use `create(MetricSchema)` to create a new message.
 */
export declare const MetricSchema: GenMessage<Metric>;

