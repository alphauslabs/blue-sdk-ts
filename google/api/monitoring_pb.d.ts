// Copyright 2018 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.7.0
// @generated from file google/api/monitoring.proto (package google.api, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/api/monitoring.proto.
 */
export declare const file_google_api_monitoring: GenFile;

/**
 * Monitoring configuration of the service.
 *
 * The example below shows how to configure monitored resources and metrics
 * for monitoring. In the example, a monitored resource and two metrics are
 * defined. The `library.googleapis.com/book/returned_count` metric is sent
 * to both producer and consumer projects, whereas the
 * `library.googleapis.com/book/overdue_count` metric is only sent to the
 * consumer project.
 *
 *     monitored_resources:
 *     - type: library.googleapis.com/branch
 *       labels:
 *       - key: /city
 *         description: The city where the library branch is located in.
 *       - key: /name
 *         description: The name of the branch.
 *     metrics:
 *     - name: library.googleapis.com/book/returned_count
 *       metric_kind: DELTA
 *       value_type: INT64
 *       labels:
 *       - key: /customer_id
 *     - name: library.googleapis.com/book/overdue_count
 *       metric_kind: GAUGE
 *       value_type: INT64
 *       labels:
 *       - key: /customer_id
 *     monitoring:
 *       producer_destinations:
 *       - monitored_resource: library.googleapis.com/branch
 *         metrics:
 *         - library.googleapis.com/book/returned_count
 *       consumer_destinations:
 *       - monitored_resource: library.googleapis.com/branch
 *         metrics:
 *         - library.googleapis.com/book/returned_count
 *         - library.googleapis.com/book/overdue_count
 *
 * @generated from message google.api.Monitoring
 */
export declare type Monitoring = Message<"google.api.Monitoring"> & {
  /**
   * Monitoring configurations for sending metrics to the producer project.
   * There can be multiple producer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one producer destination.
   *
   * @generated from field: repeated google.api.Monitoring.MonitoringDestination producer_destinations = 1;
   */
  producerDestinations: Monitoring_MonitoringDestination[];

  /**
   * Monitoring configurations for sending metrics to the consumer project.
   * There can be multiple consumer destinations, each one must have a
   * different monitored resource type. A metric can be used in at most
   * one consumer destination.
   *
   * @generated from field: repeated google.api.Monitoring.MonitoringDestination consumer_destinations = 2;
   */
  consumerDestinations: Monitoring_MonitoringDestination[];
};

/**
 * Describes the message google.api.Monitoring.
 * Use `create(MonitoringSchema)` to create a new message.
 */
export declare const MonitoringSchema: GenMessage<Monitoring>;

/**
 * Configuration of a specific monitoring destination (the producer project
 * or the consumer project).
 *
 * @generated from message google.api.Monitoring.MonitoringDestination
 */
export declare type Monitoring_MonitoringDestination = Message<"google.api.Monitoring.MonitoringDestination"> & {
  /**
   * The monitored resource type. The type must be defined in
   * [Service.monitored_resources][google.api.Service.monitored_resources] section.
   *
   * @generated from field: string monitored_resource = 1;
   */
  monitoredResource: string;

  /**
   * Names of the metrics to report to this monitoring destination.
   * Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
   *
   * @generated from field: repeated string metrics = 2;
   */
  metrics: string[];
};

/**
 * Describes the message google.api.Monitoring.MonitoringDestination.
 * Use `create(Monitoring_MonitoringDestinationSchema)` to create a new message.
 */
export declare const Monitoring_MonitoringDestinationSchema: GenMessage<Monitoring_MonitoringDestination>;

