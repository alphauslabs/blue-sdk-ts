// @generated by protoc-gen-connect-query v2.1.1
// @generated from file iam/v1/iam.proto (package blueapi.iam.v1, syntax proto3)
/* eslint-disable */

import { Iam } from "./iam_pb";

/**
 * Gets user information about the caller. This call includes all of the user metadata.
 * See [https://alphauslabs.github.io/blueapi/] for the list of supported attributes.
 *
 * @generated from rpc blueapi.iam.v1.Iam.WhoAmI
 */
export const whoAmI = Iam.method.whoAmI;

/**
 * Gets subuser information. This call includes all of the subuser metadata. See
 * [https://alphauslabs.github.io/blueapi/] for the list of supported attributes.
 * If the `{name}` parameter is `me` or `-`, returns the caller information, which
 * is equivalent to `WhoAmI()` or `GET:/iam/v*\/whoami`.
 *
 * @generated from rpc blueapi.iam.v1.Iam.GetUser
 */
export const getUser = Iam.method.getUser;

/**
 * Creates a subuser.
 *
 * @generated from rpc blueapi.iam.v1.Iam.CreateUser
 */
export const createUser = Iam.method.createUser;

/**
 * Deletes a subuser.
 *
 * @generated from rpc blueapi.iam.v1.Iam.DeleteUser
 */
export const deleteUser = Iam.method.deleteUser;

/**
 * WORK-IN-PROGRESS: Creates a new root user for a billing group or access group.
 *
 * @generated from rpc blueapi.iam.v1.Iam.CreateGroupRootUser
 */
export const createGroupRootUser = Iam.method.createGroupRootUser;

/**
 * WORK-IN-PROGRESS: Retrieves a group root user.
 *
 * @generated from rpc blueapi.iam.v1.Iam.GetGroupRootUser
 */
export const getGroupRootUser = Iam.method.getGroupRootUser;

/**
 * WORK-IN-PROGRESS: Deletes an existing group root user.
 *
 * @generated from rpc blueapi.iam.v1.Iam.DeleteGroupRootUser
 */
export const deleteGroupRootUser = Iam.method.deleteGroupRootUser;

/**
 * WORK-IN-PROGRESS: Retrieves the features available to a user on an Alphaus product.
 *
 * For a list of valid feature flags, see our documentation at https://labs.alphaus.cloud/docs/blueapi/apis/iam/.
 *
 * @generated from rpc blueapi.iam.v1.Iam.GetFeatureFlags
 */
export const getFeatureFlags = Iam.method.getFeatureFlags;

/**
 * WORK-IN-PROGRESS: Updates the features available to a user on an Alphaus product.
 *
 * For a list of valid feature flags, see our documentation at https://labs.alphaus.cloud/docs/blueapi/apis/iam/.
 *
 * @generated from rpc blueapi.iam.v1.Iam.UpdateFeatureFlags
 */
export const updateFeatureFlags = Iam.method.updateFeatureFlags;

/**
 * Creates an API client for the caller.
 *
 * @generated from rpc blueapi.iam.v1.Iam.CreateApiClient
 */
export const createApiClient = Iam.method.createApiClient;

/**
 * Deletes an API client belonging to the caller.
 *
 * @generated from rpc blueapi.iam.v1.Iam.DeleteApiClient
 */
export const deleteApiClient = Iam.method.deleteApiClient;

/**
 * WORK-IN-PROGRESS: Lists all permissions based on the input's scope. For reference, supported permissions can be found on [https://github.com/mobingi/rbac-permissions].
 *
 * @generated from rpc blueapi.iam.v1.Iam.ListPermissions
 */
export const listPermissions = Iam.method.listPermissions;

/**
 * WORK-IN-PROGRESS: Lists all available roles.
 *
 * @generated from rpc blueapi.iam.v1.Iam.ListRoles
 */
export const listRoles = Iam.method.listRoles;

/**
 * WORK-IN-PROGRESS: Creates a role. If your `permissions` list contains an `Admin` entry, all other entries will be discarded except `Admin`. Roles are root user-level. That means all roles created by the root user, or any subuser that has permissions to create roles, are available to all subusers.
 *
 * @generated from rpc blueapi.iam.v1.Iam.CreateRole
 */
export const createRole = Iam.method.createRole;

/**
 * WORK-IN-PROGRESS: Updates a role. If role name is different, rename mapped role name.
 *
 * @generated from rpc blueapi.iam.v1.Iam.UpdateRole
 */
export const updateRole = Iam.method.updateRole;

/**
 * WORK-IN-PROGRESS: Deletes a role. Deleting a role will also remove all mappings.
 *
 * @generated from rpc blueapi.iam.v1.Iam.DeleteRole
 */
export const deleteRole = Iam.method.deleteRole;

/**
 * WORK-IN-PROGRESS: Lists roles attached to the caller or the input.
 *
 * @generated from rpc blueapi.iam.v1.Iam.ListUserRoleMappings
 */
export const listUserRoleMappings = Iam.method.listUserRoleMappings;

/**
 * WORK-IN-PROGRESS: Maps roles to a subuser. You can only map (or attach) up to 5 roles to a user per namespace. There is no limit for filtering rules per user.
 *
 * @generated from rpc blueapi.iam.v1.Iam.CreateUserRoleMapping
 */
export const createUserRoleMapping = Iam.method.createUserRoleMapping;

/**
 * WORK-IN-PROGRESS: Updates user-to-role mappings. You can only map (or attach) up to 5 roles to a user per namespace. There is no limit for filtering rules per user.
 *
 * @generated from rpc blueapi.iam.v1.Iam.UpdateUserRoleMapping
 */
export const updateUserRoleMapping = Iam.method.updateUserRoleMapping;

/**
 * Lists all SSO Identity Providers (IdP).
 *
 * @generated from rpc blueapi.iam.v1.Iam.ListIdentityProviders
 */
export const listIdentityProviders = Iam.method.listIdentityProviders;

/**
 * Registers an SSO Identity Provider (IdP).
 *
 * @generated from rpc blueapi.iam.v1.Iam.CreateIdentityProvider
 */
export const createIdentityProvider = Iam.method.createIdentityProvider;

/**
 * Deletes an SSO Identity Provider (IdP).
 *
 * @generated from rpc blueapi.iam.v1.Iam.DeleteIdentityProvider
 */
export const deleteIdentityProvider = Iam.method.deleteIdentityProvider;

/**
 * Creates an IP filter item for IP blacklisting or whitelisting. At the moment, this API is only available to root users.
 *
 * @generated from rpc blueapi.iam.v1.Iam.CreateIpFilter
 */
export const createIpFilter = Iam.method.createIpFilter;

/**
 * Deletes an IP filter item. At the moment, this API is only available to root users.
 *
 * @generated from rpc blueapi.iam.v1.Iam.DeleteIpFilter
 */
export const deleteIpFilter = Iam.method.deleteIpFilter;

/**
 * BETA: Creates a partner token for custom integrations. Available only to Ripple and Cover users.
 *
 * @generated from rpc blueapi.iam.v1.Iam.CreatePartnerToken
 */
export const createPartnerToken = Iam.method.createPartnerToken;

/**
 * BETA: Refreshes an expired partner token. Only partners are expected to call this API.
 *
 * @generated from rpc blueapi.iam.v1.Iam.RefreshPartnerToken
 */
export const refreshPartnerToken = Iam.method.refreshPartnerToken;

/**
 * WORK-IN-PROGRESS: Verify User Input For Reset Password
 *
 * @generated from rpc blueapi.iam.v1.Iam.VerifyUserForResetPassword
 */
export const verifyUserForResetPassword = Iam.method.verifyUserForResetPassword;

/**
 * WORK-IN-PROGRESS: Get Sub User Metadata for login user's organization based on user identity
 *
 * @generated from rpc blueapi.iam.v1.Iam.GetSubUserMetadata
 */
export const getSubUserMetadata = Iam.method.getSubUserMetadata;

/**
 * WORK-IN-PROGRESS: Validate reset password link and proceed to update password
 *
 * @generated from rpc blueapi.iam.v1.Iam.ValidateResetPasswordLinkAndChangePassword
 */
export const validateResetPasswordLinkAndChangePassword = Iam.method.validateResetPasswordLinkAndChangePassword;

/**
 * WORK-IN-PROGRESS: List MFA users info for login user's organization based on status.
 *
 * @generated from rpc blueapi.iam.v1.Iam.GetMFAUsers
 */
export const getMFAUsers = Iam.method.getMFAUsers;

/**
 * WORK-IN-PROGRESS: Send an email reset code
 *
 * @generated from rpc blueapi.iam.v1.Iam.SendRipplePasswordResetCode
 */
export const sendRipplePasswordResetCode = Iam.method.sendRipplePasswordResetCode;

/**
 * WORK-IN-PROGRESS: Reset ripple password using code from email
 *
 * @generated from rpc blueapi.iam.v1.Iam.ResetRipplePassword
 */
export const resetRipplePassword = Iam.method.resetRipplePassword;
