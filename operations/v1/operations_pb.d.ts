// Copied from {root}/google/longrunning/operations.proto

// @generated by protoc-gen-es v2.7.0
// @generated from file operations/v1/operations.proto (package blueapi.operations.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Duration, EmptySchema } from "@bufbuild/protobuf/wkt";
import type { OperationSchema } from "../../protos/operation_pb";

/**
 * Describes the file operations/v1/operations.proto.
 */
export declare const file_operations_v1_operations: GenFile;

/**
 * Request message for the Operations.ListOperations rpc.
 *
 * @generated from message blueapi.operations.v1.ListOperationsRequest
 */
export declare type ListOperationsRequest = Message<"blueapi.operations.v1.ListOperationsRequest"> & {
  /**
   * Optional. The name of the operation's parent resource. Not used at the moment.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. List operations on and after this date. Format is yyyymmdd. For example,
   * if you want to list all operations starting from June 01, 2021, set to `20210601`.
   * If not set, defaults to the first day of the current UTC month.
   *
   * @generated from field: string asOf = 2;
   */
  asOf: string;

  /**
   * Optional. If true, include all operations that are marked as done. Exclude by
   * default.
   *
   * @generated from field: bool includeDone = 3;
   */
  includeDone: boolean;
};

/**
 * Describes the message blueapi.operations.v1.ListOperationsRequest.
 * Use `create(ListOperationsRequestSchema)` to create a new message.
 */
export declare const ListOperationsRequestSchema: GenMessage<ListOperationsRequest>;

/**
 * Request message for the Operations.GetOperation rpc.
 *
 * @generated from message blueapi.operations.v1.GetOperationRequest
 */
export declare type GetOperationRequest = Message<"blueapi.operations.v1.GetOperationRequest"> & {
  /**
   * The name of the operation resource.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message blueapi.operations.v1.GetOperationRequest.
 * Use `create(GetOperationRequestSchema)` to create a new message.
 */
export declare const GetOperationRequestSchema: GenMessage<GetOperationRequest>;

/**
 * Request message for the Operations.DeleteOperation rpc.
 *
 * @generated from message blueapi.operations.v1.DeleteOperationRequest
 */
export declare type DeleteOperationRequest = Message<"blueapi.operations.v1.DeleteOperationRequest"> & {
  /**
   * The name of the operation resource to be deleted.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message blueapi.operations.v1.DeleteOperationRequest.
 * Use `create(DeleteOperationRequestSchema)` to create a new message.
 */
export declare const DeleteOperationRequestSchema: GenMessage<DeleteOperationRequest>;

/**
 * Request message for the Operations.CancelOperation rpc.
 *
 * @generated from message blueapi.operations.v1.CancelOperationRequest
 */
export declare type CancelOperationRequest = Message<"blueapi.operations.v1.CancelOperationRequest"> & {
  /**
   * The name of the operation resource to be cancelled.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message blueapi.operations.v1.CancelOperationRequest.
 * Use `create(CancelOperationRequestSchema)` to create a new message.
 */
export declare const CancelOperationRequestSchema: GenMessage<CancelOperationRequest>;

/**
 * The request message for the Operations.WaitOperation rpc.
 *
 * @generated from message blueapi.operations.v1.WaitOperationRequest
 */
export declare type WaitOperationRequest = Message<"blueapi.operations.v1.WaitOperationRequest"> & {
  /**
   * The name of the operation resource to wait on.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The maximum duration to wait before timing out. If left blank, the wait
   * will be at most the time permitted by the underlying HTTP/RPC protocol.
   * If RPC context deadline is also specified, the shorter one will be used.
   *
   * @generated from field: google.protobuf.Duration timeout = 2;
   */
  timeout?: Duration;
};

/**
 * Describes the message blueapi.operations.v1.WaitOperationRequest.
 * Use `create(WaitOperationRequestSchema)` to create a new message.
 */
export declare const WaitOperationRequestSchema: GenMessage<WaitOperationRequest>;

/**
 * Manages long-running operations with an API service.
 *
 * When an API method normally takes long time to complete, it can be designed
 * to return [Operation][google.longrunning.Operation] to the client, and the client can use this
 * interface to receive the real response asynchronously by polling the
 * operation resource, or pass the operation resource to another API (such as
 * Google Cloud Pub/Sub API) to receive the response.  Any API service that
 * returns long-running operations should implement the `Operations` interface
 * so developers can have a consistent client experience.
 *
 * @generated from service blueapi.operations.v1.Operations
 */
export declare const Operations: GenService<{
  /**
   * Lists long-running operations.
   *
   * @generated from rpc blueapi.operations.v1.Operations.ListOperations
   */
  listOperations: {
    methodKind: "server_streaming";
    input: typeof ListOperationsRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Gets the latest state of a long-running operation. You can use this method to
   * poll the operation result at intervals.
   *
   * @generated from rpc blueapi.operations.v1.Operations.GetOperation
   */
  getOperation: {
    methodKind: "unary";
    input: typeof GetOperationRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a long-running operation. This method indicates that the client is no
   * longer interested in the operation result. It does not cancel the operation.
   *
   * @generated from rpc blueapi.operations.v1.Operations.DeleteOperation
   */
  deleteOperation: {
    methodKind: "unary";
    input: typeof DeleteOperationRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes
   * a best effort to cancel the operation, but success is not guaranteed. On successful
   * cancellation, the operation is not deleted; instead, it becomes an operation with
   * a value of [google.rpc.Status.code][google.rpc.Status.code] 1, corresponding
   * to `Code.CANCELLED`.
   *
   * @generated from rpc blueapi.operations.v1.Operations.CancelOperation
   */
  cancelOperation: {
    methodKind: "unary";
    input: typeof CancelOperationRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Waits for the specified long-running operation until it is done or reaches
   * at most a specified timeout, returning the latest state. If the operation
   * is already done, the latest state is immediately returned. If the timeout
   * specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
   * timeout is used. If the server does not support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   * Note that this method is on a best-effort basis. It may return the latest
   * state before the specified timeout (including immediately), meaning, even an
   * immediate response is no guarantee that the operation is done.
   * At the moment, Blue's default RPC timeout is around one hour.
   *
   * @generated from rpc blueapi.operations.v1.Operations.WaitOperation
   */
  waitOperation: {
    methodKind: "unary";
    input: typeof WaitOperationRequestSchema;
    output: typeof OperationSchema;
  },
}>;

